#!/usr/bin/env node

// Copyright 2017 Palantir Technologies Inc.

require('../lib/error-handling').attachGlobalErrorHandling();
process.exitCode = 0;

const chalk = require('chalk');
const path = require('path');
const _ = require('lodash');
const commander = require('commander');
const child_process = require('child_process');
const fs = require('fs');
const Promise = require('bluebird');

const { PROJECT_ROOT } = require('../lib/project');
const { readConfig } = require('../lib/config');
const { getPackages } = require('../lib/packages');
const { linkPackages, WithLinking } = require('../lib/linking');
const { runYarnWithPackageJsonMangling, runYarn } = require('../lib/yarn-with-package-json-mangling');
const { logger, deleteLogFile } = require('../lib/logger');
const { filterPackages, logFlagFeedback } = require('../lib/filtering');
const { createTaskRunner, runPackagesToposorted, abort, WithAbort } = require('../lib/taskrunning');

const CONFIG = readConfig(PROJECT_ROOT);
const PACKAGES = getPackages(PROJECT_ROOT, CONFIG);

if (_.size(PACKAGES) === 0) {
  logger.error(chalk.red(`could not find any packages under ${CONFIG.packages}`));
  process.exitCode = 1;
}

let didInit = false;
function WithInit(fn) {
  return function() {
    if (didInit) {
      throw new Error('cannot initialize twice!');
    }
    didInit = true;

    logger.transports.console.level = commander.loglevel;

    if (!commander.color) {
      chalk.enabled = false;
    }

    // 10 for default, then one for each of the 'exit' handlers we know will be attached by child processes.
    // All this does is prevent warnings, but it's good practice.
    process.setMaxListeners(10 + commander.parallel);

    deleteLogFile();

    const startTime = Date.now();

    function logTiming(verbiage) {
      logger.info(`yerna: ${verbiage} ${((Date.now() - startTime) / 1000).toFixed(2)}s`);
    }

    process.on('exit', () => {
      if (process.exitCode === 0) {
        deleteLogFile();
        logTiming('took');
      } else {
        logTiming('failed after');
      }
    });

    process.on('SIGINT', () => {
      logger.error(chalk.red('yerna: received sigint, terminating...'));
      abort(null, { userInitiated: true });
    });

    if (process.exitCode === 0) {
      return fn.apply(this, arguments);
    } else {
      // Do nothing; wait for process to exit...
    }
  }
}

function decorate(fn, ...decorators) {
  return decorators.slice().reverse().reduce((decoratedFn, decorator) => decorator(decoratedFn), fn);
}

const performLink = decorate(function() {
  linkPackages(PACKAGES);
  logger.info(`yerna: linked ${chalk.cyan(_.size(PACKAGES))} local packages`);
}, WithAbort, WithInit);

const performInstall = decorate(function(moreArgs) {
  const filteredPackages = filterPackages(PACKAGES, commander);
  const yarnArgs = [ 'install' ].concat(moreArgs);
  logFlagFeedback(commander, filteredPackages, 'yarn ' + yarnArgs.join(' '));
  return runPackagesToposorted(
    filteredPackages,
    createTaskRunner(spawnArgs => runYarnWithPackageJsonMangling(yarnArgs, spawnArgs, PACKAGES), commander.force),
    commander.parallel
  );
}, WithAbort, WithInit, WithLinking(PACKAGES));

const performList = decorate(function() {
  const filteredPackages = filterPackages(PACKAGES, commander);
  logFlagFeedback(commander, filteredPackages);
  return runPackagesToposorted(
    filteredPackages,
    (pkg) => {
      logger.info(pkg.name);
      return Promise.resolve();
    },
    commander.parallel
  );
}, WithAbort, WithInit);

const performRun = decorate(function(scriptName, moreArgs, options) {
  const filteredPackages = filterPackages(PACKAGES, commander, pkg => !!pkg.scripts[scriptName]);
  const yarnArgs = [ 'run', scriptName  ].concat(moreArgs);
  const executableName = options.mangle ? 'yarnhack' : 'yarn';
  logFlagFeedback(commander, filteredPackages, executableName + ' ' + yarnArgs.join(' '), [ `have a ${chalk.magenta(scriptName)} script` ]);
  const spawnTask = options.mangle
    ? spawnArgs => runYarnWithPackageJsonMangling(yarnArgs, spawnArgs, PACKAGES)
    : spawnArgs => runYarn(yarnArgs, spawnArgs);
  return runPackagesToposorted(
    filteredPackages,
    createTaskRunner(spawnTask, commander.force),
    commander.parallel
  );
}, WithAbort, WithInit, WithLinking(PACKAGES));

const performExec = decorate(function(binaryName, moreArgs) {
  const filteredPackages = filterPackages(PACKAGES, commander);
  logFlagFeedback(commander, filteredPackages, [ binaryName ].concat(moreArgs).join(' '));
  return runPackagesToposorted(
    filteredPackages,
    createTaskRunner(spawnArgs => child_process.spawn(binaryName, moreArgs, spawnArgs), commander.force),
    commander.parallel
  );
}, WithAbort, WithInit, WithLinking(PACKAGES));

function optParallel(n) {
  if (n == null || +n <= 0 || Math.round(n) !== +n) {
    console.error(chalk.red('yerna: parallel option must be a positive integer'));
    process.exitCode = 1;
  } else {
    return +n;
  }
}

function concatOpt(opt, allOpts) {
  return allOpts.concat([ opt ]);
}

function optEnum(values, optName) {
  return function(opt) {
    if (values.indexOf(opt) === -1) {
      console.error(chalk.red(`yerna: ${optName} option must be one of '${values.join('\', \'')}'`));
      process.exitCode = 1;
    } else {
      return opt;
    }
  };
}

commander
  .description('Yerna: run tasks over one or more packages in parallel')
  .usage('<command> [yerna options] [-- delegate options]')
  .version(require('../package.json').version)
  .option('-i, --include <regex>', 'run command only on packages matching <regex>; can be specified multiple times (default: all packages)', concatOpt, [])
  .option('-x, --exclude <regex>', 'run command except on packages matching <regex>; can be specified multiple times (default: no excludes)', concatOpt, [])
  .option('--dependents', 'additionally include all transitive dependents of selected packages (even when excluded)', false)
  .option('--dependencies', 'additionally include all transitive dependencies of selected packages (even when excluded)', false)
  .option('-p, --parallel <n>', 'run up to <n> processes in parallel (default: 4)', optParallel, 4)
  .option('-l, --loglevel <level>', 'set the log level for Yerna', optEnum([ 'debug', 'verbose', 'info', 'warn', 'error' ], 'loglevel'), 'info')
  .option('-f, --force', 'don\'t abort if a task exits non-zero or is interrupted', false)
  .option('-c, --no-color', 'disable colorized output', false);

commander.on('--help', () =>{
  [
    '  Notes:',
    '',
    '    - Use -- to separate arguments intended for Yarn. See examples.',
    '    - Most tasks automatically relink local dependencies; `yerna link` usage should be rare.',
    '',
    '  Examples:',
    '',
    '    $ yerna install',
    '    $ yerna install --include foo',
    '    $ yerna install -- --pure-lockfile',
    '    $ yerna install --include foo --include bar -- --pure-lockfile',
    '    $ yerna run taskname --include foo --exclude bar',
    '    $ yerna run taskname -i "^foo(bar)?" --mangle',
    '    $ yerna exec ls -- -la',
    ''
  ].forEach(line => console.log(line));
});

commander
  .command('install -- [args...]')
  .description('`yarn install` for the specified packages')
  .action(performInstall);

commander
  .command('link')
  .description('symlink all local package dependencies (ignores all flags)')
  .action(performLink);

commander
  .command('list')
  .description('list package names matching all provided flags')
  .action(performList);

commander
  .command('run <scriptname> -- [args...]')
  .option('--mangle', 'mangle package.json before running the script in each package (default: false)', false)
  .description('`yarn run <scriptname>` for the specified packages')
  .action(performRun);

commander
  .command('exec <executable> -- [args...]')
  .description('run `<executable> <args>` for the specified packages')
  .action(performExec);

commander.parse(process.argv);

if (!didInit) {
  commander.outputHelp();
  process.exitCode = 2;
}
